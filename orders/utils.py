import datetime

from django.contrib import messages
from django.conf import settings
from django.shortcuts import redirect

from .models import Order


def active_order(request):
    """
    Retrieve an active order(completed=False) and the order items    
    
    Args:
        request (HttpRequest): The current HTTP request object.

    Returns:
        dict: Order object as order and OrderItems object as items
    """
    context = {}
    if request.user.is_authenticated:
        customer = request.user
        order, created = Order.objects.get_or_create(customer=customer,completed=False)
        items = order.orderitem_set.all()
        context = {'items': items, 'order':order}
        return context
    else:
        context = {'items': '', 'order': ''}
        return context

def currency_session_value(request):
    """
    Checks if a currency session exists, if it doesn't the it sets it to the default set currency.
    """    
    if not request.session.has_key('currency'):
        request.session['currency'] = settings.DEFAULT_CURRENCY
    return request.session['currency']

def process_payment(paynow_obj:object, cart_items:object , order_obj:object, email:str):
    '''
    Processes payment through paynow's object
    returns a json response from paynow.

    Args:
        paynow_obj (object): The paynow instance generated by paynow object.
        cart_items (object): Items that are in the cart.
        order_obj (object): The current order in active order i.e complete is False.
        email (str): Email of the user.
    
    Returns:
        json: Returns an json object as a response from paynow.
    '''
    try:
        payment = paynow_obj.create_payment(order_obj.transaction_id, auth_email=email)
        for item in cart_items:
            payment.add(item.product.name, item.product.price * item.quantity)
        response = paynow_obj.send(payment)
        return response
    except Exception as e:
        return e
